# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        if: matrix.os == 'macos-latest'
        run: |
          python -m pip install --upgrade pip
          pip install flake8 gnureadline
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Install dependencies
        if: matrix.os != 'macos-latest'
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude examples/
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Generate binary
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --onefile --noconfirm --distpath ./win --clean ob2sync_win.spec
      - name: Generate binary
        if: matrix.os == 'ubuntu-latest'
        run: |
          pyinstaller --onefile --noconfirm --distpath ./linux-x86 --clean ob2sync_linux_x86.spec
      - name: Generate binary
        if: matrix.os == 'macos-latest'
        run: |
          pyinstaller --onefile --noconfirm --distpath ./macos --clean ob2sync_macos.spec
      - name: Package - Windows
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          7z a -tzip win/ob2sync-windows.zip win/ob2sync.exe README.md
      - name: Package - Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          chmod +x linux-x86/ob2sync
          tar czvf linux-x86/ob2sync-linux-x86.tar.gz linux-x86/ob2sync README.md
      - name: Package - MacOS
        if: matrix.os == 'macos-latest'
        run: |
          chmod +x macos/ob2sync
          tar czvf macos/ob2sync-macos.tar.gz macos/ob2sync README.md
      - name: Upload artifact - Windows
        uses: actions/upload-artifact@v2
        if: matrix.os == 'windows-latest'
        with:
          name: ob2sync-windows.zip
          path: ./win
      - name: Upload artifact - Linux
        uses: actions/upload-artifact@v2
        if: matrix.os == 'ubuntu-latest'
        with:
          name: ob2sync-linux-x86.tar.gz
          path: ./linux-x86
      - name: Upload artifact - MacOS
        uses: actions/upload-artifact@v2
        if: matrix.os == 'macos-latest'
        with:
          name: ob2sync-macos.tar.gz
          path: ./macos

  
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: ls
        run: ls -R
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset - Windows
        id: upload-release-asset-win
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./
          asset_name: ob2sync-windows.zip
          asset_content_type: application/zip
      - name: Upload Release Asset - Linux
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./
          asset_name: ob2sync-linux-x86.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Asset - MacOS
        id: upload-release-asset-macos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./
          asset_name: ob2sync-macos.tar.gz
          asset_content_type: application/gzip